// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import {HuffConfig} from "foundry-huff/HuffConfig.sol";
import {HuffDeployer} from "foundry-huff/HuffDeployer.sol";
import {NonMatchingSelectorHelper} from "./test-utils/NonMatchingSelectorHelper.sol";

interface MaxOfArray {
    function maxOfArray(
        uint256[] calldata nums
    ) external pure returns (uint256);
}

contract MaxOfArrayTest is Test, NonMatchingSelectorHelper {
    MaxOfArray public maxOfArray;

    function setUp() public {
        maxOfArray = MaxOfArray(HuffDeployer.config().deploy("MaxOfArray"));
    }

    function testMaxOfArray() external {
        uint256[] memory arr = new uint256[](10);
        arr[0] = 2;
        arr[1] = 4;
        arr[2] = 262;
        arr[3] = 8;
        arr[4] = 4;
        arr[5] = 1;
        arr[6] = 0;
        arr[7] = 17;
        arr[8] = 67251781;
        arr[9] = 27;

        uint256 x = maxOfArray.maxOfArray(arr);
        assertEq(x, 67251781, "expected max of arr to be 67251781");

        uint256[] memory arr2 = new uint256[](0);
        vm.expectRevert();
        maxOfArray.maxOfArray(arr2);

        uint256[] memory arr3 = new uint256[](5);
        arr3[0] = 2;
        arr3[1] = 7;
        arr3[2] = 7;
        arr3[3] = 5;
        arr3[4] = 4;
        x = maxOfArray.maxOfArray(arr3);
        assertEq(x, 7, "expected max of arr to be 7");
    }

    /// @notice Test that a non-matching selector reverts
    // @todo
    function testNonMatchingSelector(bytes32 callData) public {
        bytes4[] memory func_selectors = new bytes4[](1);
        func_selectors[0] = MaxOfArray.maxOfArray.selector;

        bool success = nonMatchingSelectorHelper(
            func_selectors,
            callData,
            address(maxOfArray)
        );
        assert(!success);
    }
}

// function selector
// 0xa9505eb4

// calldata
// 0xa9505eb


// Runtime Bytecode
// 60003560e01c8063a9505eb4146100165760006000fd5b6004351561002a5760043560005260206000f35b60043560005260206000f3

// calldata2
// 0xa9505eb40000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000002620000000000000000000000000000000000000000000000000000000000000008

// calldata3
// 0xa9505eb


// Runtime bytecode 2
// 60003560e01c36600490036000528063a9505eb41461001e5760006000fd5b6004351561004f575b6000516020900335602051016020526000516020900360005260005160041461005b57610027565b60043560005260206000f35b602051602a900360205260206020f3


// runtime bytecode github
// 60003560e01c63a9505eb414610016575b60006000fd5b602435801561001057600060245b82156100465760200190813581811061003957905b5091600190039190610024565b5060005260206000f3


// calldata3
// 0xa9505eb
// 
// 0xa9505eb40000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000005
// 0000000000000000000000000000000000000000000000000000000000000002
// 0000000000000000000000000000000000000000000000000000000000000007
// 0000000000000000000000000000000000000000000000000000000000000007
// 0000000000000000000000000000000000000000000000000000000000000005
// 0000000000000000000000000000000000000000000000000000000000000004

// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000004
// 0000000000000000000000000000000000000000000000000000000000000262
// 0000000000000000000000000000000000000000000000000000000000000008
// 0000000000000000000000000000000000000000000000000000000000000004
// 0000000000000000000000000000000000000000000000000000000000000001
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000017
// 0000000000000000000000000000000000000000000000000000000067251781
// 0000000000000000000000000000000000000000000000000000000000000027