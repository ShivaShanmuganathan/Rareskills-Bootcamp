
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // Get the function selector
    0x00
    calldataload
    0xE0
    shr

    // Jump to the implementation of the ADD_ONE function if the calldata matches the function selector
    __FUNC_SIG(multiply) eq multiply jumpi // Compare function selector to setValue(uint256)
    
    
    0x00 0x00 revert

    multiply:
        MULTIPLY()

    check_overflow:
        CHECK_OVERFLOW()
}


#define macro MULTIPLY() = takes(0) returns(0) {
    0x04 calldataload iszero return_zero jumpi 

    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    mul                   // add number 1 and 2 and put the result onto the stack

    check_overflow jump

    check_overflow:
        CHECK_OVERFLOW()

    return_zero:
        RETURN_ZERO()
}


#define macro RETURN_ZERO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

#define macro FINISH_MULTIPLY() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    mul                   // add number 1 and 2 and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

#define macro CHECK_OVERFLOW() = takes(0) returns(0) {

    0x04 calldataload
    swap1
    div
    0x24 calldataload
    eq
    
    finish_multiply jumpi 

    0x00 0x00 revert

    finish_multiply:
        FINISH_MULTIPLY()
}